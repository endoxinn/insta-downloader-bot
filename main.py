import os
import io
import time
import re
import requests
from dotenv import load_dotenv
import telebot
from telebot import types
from instagrapi import Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
INSTAGRAM_SESSIONID = os.getenv('INSTAGRAM_SESSIONID')
CHANNEL_USERNAME = '@instosaverr'
ADMIN_USERNAMES = os.getenv('ADMIN_USERNAMES')
if ADMIN_USERNAMES is None:
    print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_USERNAMES –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    ADMIN_USERNAMES = []
else:
    ADMIN_USERNAMES = [username.strip() for username in ADMIN_USERNAMES.split(',')]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.set_my_commands([
    telebot.types.BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
    telebot.types.BotCommand("help", "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
    telebot.types.BotCommand("check", "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
    telebot.types.BotCommand("admin", "‚öôÔ∏è –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Instagram
cl = Client()
try:
    cl.login_by_sessionid(INSTAGRAM_SESSIONID)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram: {e}")

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

FREE_DOWNLOADS = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì• –°–∫–∞—á–∞—Ç—å", "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    return markup

def check_subscription(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def is_admin(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status == 'administrator' or (member.user.username and member.user.username in ADMIN_USERNAMES)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'downloads': 0}

    bot.send_message(message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –ø–æ—Å—Ç—ã, Reels –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Instagram!\n\n"
        f"üì• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {FREE_DOWNLOADS}\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª.",
        reply_markup=main_menu())

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
        "üîπ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *¬´üì• –°–∫–∞—á–∞—Ç—å¬ª*.\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, Reels –∏–ª–∏ –°—Ç–æ—Ä–∏—Å –∏–∑ Instagram.\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤!\n\n"
        "‚ö° *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã 3 –∑–∞–≥—Ä—É–∑–∫–∏!* –ü–æ—Å–ª–µ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
        "üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n"
        f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëâ {CHANNEL_USERNAME}",
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['check'])
def check(message):
    user_id = message.from_user.id
    if check_subscription(user_id):
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!", reply_markup=main_menu())
    else:
        send_subscription_prompt(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def callback_check_subscription(call):
    user_id = call.from_user.id
    if check_subscription(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        bot.send_message(call.message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!", reply_markup=main_menu())
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
        send_subscription_prompt(call.message.chat.id)

def send_subscription_prompt(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"))
    markup.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
    bot.send_message(chat_id,
        "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.send_message(message.chat.id, "‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

def admin_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üó£ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markup.add("üîô –ù–∞–∑–∞–¥")
    return markup

@bot.message_handler(func=lambda message: message.text == "üó£ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
def send_message_to_users(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        bot.register_next_step_handler(message, broadcast_message)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

def broadcast_message(message):
    if is_admin(message.from_user.id):
        text = message.text
        success = 0
        for user_id in list(user_data.keys()):
            try:
                bot.send_message(user_id, text)
                success += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    if is_admin(message.from_user.id):
        total_users = len(user_data)
        bot.send_message(message.chat.id, f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_data:
        user_data[user_id] = {'downloads': 0}

    if text == "üì• –°–∫–∞—á–∞—Ç—å":
        bot.send_message(message.chat.id, "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, Reels –∏–ª–∏ Story!")
    elif text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        send_subscription_prompt(message.chat.id)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_command(message)
    elif text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    else:
        download_instagram_content(message)

def download_instagram_content(message):
    user_id = message.from_user.id
    url = message.text.strip()

    if not re.match(r'https?://(www\.)?(instagram\.com|instagr\.am)/', url):
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    if user_data[user_id]['downloads'] >= FREE_DOWNLOADS and not check_subscription(user_id):
        send_subscription_prompt(message.chat.id)
        return

    loading_msg = bot.send_message(message.chat.id, "üîç –ó–∞–≥—Ä—É–∂–∞—é 0%...")

    try:
        bot.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é 25%...", chat_id=message.chat.id, message_id=loading_msg.message_id)

        media_pk = cl.media_pk_from_url(url)
        media_info = cl.media_info(media_pk)

        bot.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é 50%...", chat_id=message.chat.id, message_id=loading_msg.message_id)

        if '/stories/highlights/' in url:
            highlight = cl.highlight_info(media_pk)
            media_group = [download_media(item.video_url or item.thumbnail_url, bool(item.video_url)) for item in highlight.items]
            media_group = [m for m in media_group if m]
            if media_group:
                bot.send_media_group(message.chat.id, media_group[:10])

        elif '/stories/' in url:
            story = cl.story_info(media_pk)
            file_url = story.video_url or story.thumbnail_url
            send_file_from_url(file_url, message.chat.id, bool(story.video_url))

        elif '/reel/' in url or '/reels/' in url:
            send_file_from_url(media_info.video_url or media_info.thumbnail_url, message.chat.id, bool(media_info.video_url))

        else:
            if media_info.media_type == 1:  # –§–æ—Ç–æ
                send_file_from_url(media_info.thumbnail_url, message.chat.id, False)
            elif media_info.media_type == 2:  # –í–∏–¥–µ–æ
                send_file_from_url(media_info.video_url, message.chat.id, True)
            elif media_info.media_type == 8:  # –ê–ª—å–±–æ–º
                media_group = [download_media(res.video_url or res.thumbnail_url, bool(res.video_url)) for res in media_info.resources]
                media_group = [m for m in media_group if m]
                if media_group:
                    bot.send_media_group(message.chat.id, media_group[:10])
            else:
                bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

        user_data[user_id]['downloads'] += 1
        bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ!", chat_id=message.chat.id, message_id=loading_msg.message_id)

    except Exception as e:
        bot.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", chat_id=message.chat.id, message_id=loading_msg.message_id)
    finally:
        time.sleep(2)
        try:
            bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
        except:
            pass

def send_file_from_url(file_url, chat_id, is_video=False):
    try:
        response = requests.get(file_url, stream=True, timeout=10)
        response.raise_for_status()
        file_bytes = io.BytesIO(response.content)
        file_bytes.name = "file.mp4" if is_video else "file.jpg"

        if is_video:
            bot.send_video(chat_id, file_bytes)
        else:
            bot.send_photo(chat_id, file_bytes)

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

def download_media(file_url, is_video=False):
    try:
        response = requests.get(file_url, stream=True, timeout=10)
        response.raise_for_status()
        file_bytes = io.BytesIO(response.content)
        file_bytes.name = "file.mp4" if is_video else "file.jpg"

        return types.InputMediaVideo(file_bytes) if is_video else types.InputMediaPhoto(file_bytes)

    except:
        return None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
